{
  "name": "qunit",
  "description": "QUnit testing framework for nodejs",
  "version": "0.7.5",
  "author": {
    "name": "Oleg Slobodskoi",
    "email": "oleg008@gmail.com"
  },
  "contributors": [
    {
      "name": "Jonathan Buchanan"
    },
    {
      "name": "Ashar Voultoiz"
    },
    {
      "name": "Drew Fyock"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/kof/node-qunit.git"
  },
  "keywords": [
    "TDD",
    "QUnit",
    "unit",
    "testing",
    "tests",
    "async"
  ],
  "bin": {
    "qunit": "./bin/cli.js"
  },
  "engines": {
    "node": ">=0.6.0 < 0.12.0"
  },
  "scripts": {
    "test": "node --harmony ./test/testrunner.js"
  },
  "dependencies": {
    "argsparser": "^0.0.6",
    "cli-table": "^0.3.0",
    "co": "^3.0.6",
    "qunitjs": "1.10.0",
    "tracejs": "^0.1.8",
    "underscore": "^1.6.0",
    "istanbul": "https://github.com/gotwarlost/istanbul/tarball/harmony"
  },
  "devDependencies": {
    "chainer": "^0.0.5",
    "timekeeper": "^0.0.4"
  },
  "optionalDependencies": {
    "istanbul": "https://github.com/gotwarlost/istanbul/tarball/harmony"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http: //www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "## QUnit testing framework for nodejs.\n\nhttp://qunitjs.com\n\nhttp://github.com/jquery/qunit\n\n### Features\n\n- cli\n- testrunner api\n- test coverage via istanbul\n- tests inside of one testfile run synchronous, but every testfile runs parallel\n- tests from each file run in its own spawned node process\n- same API for client and server side code (original QUnit is used)\n- the simplest API of the world, especially for asynchronous testing\n- you can write tests in TDD or BDD style depending on your task and test type\n- you can run the same tests in browser if there is no dependencies to node\n- generators support\n\n### Installation\n\n```bash\n$ npm i qunit\n```\n\n### API\n\n    http://api.qunitjs.com\n\n#### The only exception\n\n```javascript\n// Separate tests into modules.\n// Use `QUnit` namespace, because `module` is reserved for node.\nQUnit.module(name, lifecycle)\n```\n\n### Usage\n\n#### Command line\n\nRead full cli api doc using \"--help\" or \"-h\":\n\n```bash\n$ qunit -h\n\n$ qunit -c ./code.js -t ./tests.js\n```\n\nBy default, code and dependencies are added to the global scope. To specify\nrequiring them into a namespace object, prefix the path or module name with the\nvariable name to be used for the namespace object, followed by a colon:\n\n```bash\n$ qunit -c code:./code.js -d utils:utilmodule -t ./time.js\n```\n\n#### via api\n\n```javascript\nvar testrunner = require(\"qunit\");\n\n// Defaults:\n{\n    // logging options\n    log: {\n\n        // log assertions overview\n        assertions: true,\n\n        // log expected and actual values for failed tests\n        errors: true,\n\n        // log tests overview\n        tests: true,\n\n        // log summary\n        summary: true,\n\n        // log global summary (all files)\n        globalSummary: true,\n\n        // log coverage\n        coverage: true,\n\n        // log global coverage (all files)\n        globalCoverage: true,\n\n        // log currently testing code file\n        testing: true\n    },\n\n    // run test coverage tool\n    coverage: false,\n\n    // define dependencies, which are required then before code\n    deps: null,\n\n    // define namespace your code will be attached to on global['your namespace']\n    namespace: null,\n\n    // max amount of ms child can be blocked, after that we assume running an infinite loop\n    maxBlockDuration: 2000\n}\n```\n\n```javascript\n// change any option for all tests globally\ntestrunner.options.optionName = value;\n\n// or use setup function\ntestrunner.setup({\n    log: {\n        summary: true\n    }\n});\n\n\n// one code and tests file\ntestrunner.run({\n    code: \"/path/to/your/code.js\",\n    tests: \"/path/to/your/tests.js\"\n}, callback);\n\n// require code into a namespace object, rather than globally\ntestrunner.run({\n    code: {path: \"/path/to/your/code.js\", namespace: \"code\"},\n    tests: \"/path/to/your/tests.js\"\n}, callback);\n\n// one code and multiple tests file\ntestrunner.run({\n    code: \"/path/to/your/code.js\",\n    tests: [\"/path/to/your/tests.js\", \"/path/to/your/tests1.js\"]\n}, callback);\n\n// array of code and test files\ntestrunner.run([\n    {\n        code: \"/path/to/your/code.js\",\n        tests: \"/path/to/your/tests.js\"\n    },\n    {\n        code: \"/path/to/your/code.js\",\n        tests: \"/path/to/your/tests.js\"\n    }\n], callback);\n\n// using testrunner callback\ntestrunner.run({\n    code: \"/path/to/your/code.js\",\n    tests: \"/path/to/your/tests.js\"\n}, function(err, report) {\n    console.dir(report);\n});\n\n// specify dependency\ntestrunner.run({\n    deps: \"/path/to/your/dependency.js\",\n    code: \"/path/to/your/code.js\",\n    tests: \"/path/to/your/tests.js\"\n}, callback);\n\n// dependencies can be modules or files\ntestrunner.run({\n    deps: \"modulename\",\n    code: \"/path/to/your/code.js\",\n    tests: \"/path/to/your/tests.js\"\n}, callback);\n\n// dependencies can required into a namespace object\ntestrunner.run({\n    deps: {path: \"utilmodule\", namespace: \"utils\"},\n    code: \"/path/to/your/code.js\",\n    tests: \"/path/to/your/tests.js\"\n}, callback);\n\n// specify multiple dependencies\ntestrunner.run({\n    deps: [\"/path/to/your/dependency1.js\", \"/path/to/your/dependency2.js\"],\n    code: \"/path/to/your/code.js\",\n    tests: \"/path/to/your/tests.js\"\n}, callback);\n```\n\n### Writing tests\n\nQUnit API and code which have to be tested are already loaded and attached to the global context.\n\nSome tests examples\n\n```javascript\ntest(\"a basic test example\", function () {\n    ok(true, \"this test is fine\");\n    var value = \"hello\";\n    equal(\"hello\", value, \"We expect value to be hello\");\n});\n\nQUnit.module(\"Module A\");\n\ntest(\"first test within module\", 1, function () {\n    ok(true, \"a dummy\");\n});\n\ntest(\"second test within module\", 2, function () {\n    ok(true, \"dummy 1 of 2\");\n    ok(true, \"dummy 2 of 2\");\n});\n\nQUnit.module(\"Module B\", {\n    setup: function () {\n        // do some initial stuff before every test for this module\n    },\n    teardown: function () {\n        // do some stuff after every test for this module\n    }\n});\n\ntest(\"some other test\", function () {\n    expect(2);\n    equal(true, false, \"failing test\");\n    equal(true, true, \"passing test\");\n});\n\nQUnit.module(\"Module C\", {\n    setup: function() {\n        // setup a shared environment for each test\n        this.options = { test: 123 };\n    }\n});\n\ntest(\"this test is using shared environment\", 1, function () {\n    deepEqual({ test: 123 }, this.options, \"passing test\");\n});\n\ntest(\"this is an async test example\", function () {\n    expect(2);\n    stop();\n    setTimeout(function () {\n        ok(true, \"finished async test\");\n        strictEqual(true, true, \"Strict equal assertion uses ===\");\n        start();\n    }, 100);\n});\n```\n\n### Generators support\n\n```javascript\ntest(\"my async test with generators\", function* () {\n    var data = yield asyncFn();\n    equal(data, {a: 1}, 'generators work');\n});\n```\n\n### Run tests\n\n```bash\n$ npm i\n$ npm test\n```\n\n### Coverage\n\nCode coverage via Istanbul. To utilize, install `istanbul` and set option `coverage: true` or give a path where to store report `coverage: {dir: \"coverage/path\"}` or pass `--cov` parameter in the shell. Coverage calculations based on code and tests passed to `node-qunit`.\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/kof/node-qunit/issues"
  },
  "homepage": "https://github.com/kof/node-qunit",
  "_id": "qunit@0.7.5",
  "dist": {
    "shasum": "3b84c824ca0b5cb34d03e7ac310cab3c8f81d749"
  },
  "_from": "qunit@",
  "_resolved": "https://registry.npmjs.org/qunit/-/qunit-0.7.5.tgz"
}
